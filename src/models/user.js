const mongoose = require('mongoose');
const validator = require('validator');
const bcrypt = require('bcrypt');
const jwt = require("jsonwebtoken");

const userSchema = new mongoose.Schema({
    firstName: { type: String, required: true, minLength: 4, maxLength: 20 },
    lastName: { type: String },
    emailId: {
        type: String, lowercase: true, trim: true, required: true, unique: true,
        validate(value) {
            if (!validator.isEmail(value)) {
                throw new Error("Invalid email address :" + value);
            }
        }
    },
    password: {
        type: String, required: true,
        validate(value) {
            if (!validator.isStrongPassword(value)) {
                throw new Error("Enter a Strong Password :" + value);
            }
        }
    },
    age: { type: Number, min: 18 },
    gender: {
        type: String, validate(value) {
            if (!["male", "female", "others"].includes(value)) {
                throw new Error("Gender data not valid");
            }
        }
    },
    photoUrl: {
        type: String, default: "https://geographyandyou.com/images/user-profile.png",
        validate(value) {
            if (!validator.isURL(value)) {
                throw new Error("Invalid photo url :" + value);
            }
        }
    },
    about: { type: String, default: "This is a default description of the user" },
    skills: { type: [String], }
}, {
    timestamps: true,
});

userSchema.methods.getJWT = async function () {
    const user = this;
    const token = await jwt.sign({ _id: user._id }, "DEV@Tinder$98", {
        expiresIn: "7d",
    });
    return token;
};

userSchema.methods.validatePassword = async function(passwordInputByUser) {
    const user = this;
    const passwordHash = user.password; //generated by bcrypt
    const isPasswordValid = await bcrypt.compare(passwordInputByUser, passwordHash);
    return isPasswordValid;
}

userSchema.methods.setNewPassword = async function(newPassword) {
    const passwordHash = await bcrypt.hash(newPassword, 10);
    return passwordHash;
}



module.exports = mongoose.model("User", userSchema);